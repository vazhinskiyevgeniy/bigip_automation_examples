---
- name: Request TMOS Masterkey
  hosts: tmos
  gather_facts: false

  vars_files:
    - tmos_vars.yml
    - next_vars.yml

  tasks:
    - name: Get TMOS BIG-IP Masterkey
      raw: f5mku -K
      register: f5kmu_output

    - name: Save Masterkey
      set_fact:
        master_key: "{{  f5kmu_output.stdout  }}"

    - name: Login to the API
      delegate_to: localhost
      uri:
        url: "https://{{  central_manager.address  }}/api/login"
        method: POST
        body: '{"username": "{{  central_manager.user  }}", "password": "{{  central_manager.password  }}"}'
        body_format: json
        headers:
          Content-Type: "application/json"
        validate_certs: no
      register: login_response

    - name: Save access_token
      set_fact:
        access_token: "{{ login_response.json.access_token }}"

    - name: Create New Migration
      delegate_to: localhost
      uri:
        url: "https://{{ central_manager.address }}/api/v1/migrations"
        method: POST
        body: '{"name": "auto-migration-{{  inventory_hostname | replace(".", "-") }}-{{ 99999999 | random | to_uuid }}", "description": "Ansible Job Migration {{ "" | get_date_time }}"}'
        body_format: json
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{  access_token  }}"
        validate_certs: no
        status_code: 201
      register: next_migration

    - name: Upload UCS
      delegate_to: localhost
      shell: >
        curl -X POST
        -F "ucs_file=@/tmp/{{  tmos_ucs_name  }}_{{  inventory_hostname  }}.ucs"
        -F "master_key={{ master_key }}"
        -F "grouping_type=ip"
        --insecure
        -H "Authorization: Bearer {{ access_token }}"
        "https://{{ central_manager.address }}/api/v1/migrations/{{ next_migration.json.id }}/upload?async=false"
      register: result

    - name: Analyze application eligibility for migration
      delegate_to: localhost
      uri:
        url: "https://{{ central_manager.address }}/api/v1/migrations/{{ next_migration.json.id }}/applications?limit={{ central_manager.max_applications }}"
        method: GET
        headers:
          Authorization: "Bearer {{  access_token  }}"
        validate_certs: no
      register: cm_apps

    - name: Get migratable green apps
      set_fact:
        migrate_apps: "{{ cm_apps.json | json_query(query) | reject('equalto', []) | flatten(1) }} "
      vars:
        query: "_embedded.applications[?virtual_servers[?(status=='green' || status=='yellow') && length(irules) == `0`]]"

    - name: Save host data to CSV using Python script
      delegate_to: localhost
      local_action:
        module: command
        args:
          cmd: >
            python3 generate_report.py
            '{{ report_file }}'
            '{{ deploy_tree | to_json }}'
            '{{ ip_map | to_json }}'
            '{{ cm_apps | to_json }}'
            'cm_apps.json'
            
    - name: Extract not installed Shared Objects
      set_fact:
        app_shared_objects_names: "{{ migrate_apps | shared_object_names(migrate_shared_object_prefix) }}"

    - name: Get Installed WAFs
      delegate_to: localhost
      uri:
        url: "https://{{ central_manager.address }}/api/waf/v1/policies"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
        validate_certs: no
      register: next_wafs_available

    - name: Any Next WAFs Available
      set_fact:
        next_waf_total: "{{ next_wafs_available | json_query(query) | int }}"
      vars:
        query: "json.total"

    - name: Set installed_waf_names to empty if next_waf_total is 0
      set_fact:
        installed_waf_names: []
      when: next_waf_total | int == 0

    - name: Filter installed WAF names
      set_fact:
        installed_waf_names: "{{ next_wafs_available | json_query(query) | list }}"
      vars:
        query: "json._embedded.policies[].name"
      when: next_waf_total | int != 0

    - name: Get Installed Certificates
      delegate_to: localhost
      uri:
        url: "https://{{ central_manager.address }}/api/certificate/v1/certificates?limit=10000&select=id,name,status"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
        validate_certs: no
      register: next_certs_available

    - name: Any Certs Available
      set_fact:
        next_certs_total: "{{ next_certs_available | json_query(query) | int }}"
      vars:
        query: "json.total"

    - name: Set installed_certs_names to empty if next_certs_total is 0
      set_fact:
        installed_certs_names: []
      when: next_certs_total | int == 0

    - name: Filter installed Certificates names
      set_fact:
        installed_certs_names: "{{ next_certs_available | json_query(query) | list }}"
      vars:
        query: "json._embedded.certificates[].name"
      when: next_certs_total | int != 0

    - name: Get Apps with missing dependent objects
      set_fact:
        import_dependecies_apps: "{{ app_shared_objects_names | get_apps_to_import_dependencies(installed_waf_names, installed_certs_names) }}"

    - name: Prepare apps to install dependencies
      delegate_to: localhost
      uri:
        url: "https://{{ central_manager.address }}/api/v1/migrations/{{ next_migration.json.id  }}/applications/bulk-stage"
        body:
          applications: "{{ import_dependecies_apps }}"
        body_format: json
        method: PUT
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ access_token }}"
        validate_certs: no
      register: result

    - name: Install dependencies if necessary
      delegate_to: localhost
      uri:
        url: "https://{{ central_manager.address }}/api/v1/migrations/{{ next_migration.json.id  }}/applications/install-dependencies"
        body: '{"applications": [{{ item }}]}'
        body_format: json
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ access_token }}"
        validate_certs: no
        status_code: 200
      with_items: "{{ import_dependecies_apps }}"
      register: result

    - name: Get applications AS3 preview
      set_fact:
        preview_links: "{{ migrate_apps | map(attribute='as3_preview') | list }}"

    - name: Download each AS3 preview file
      delegate_to: localhost
      uri:
        url: "https://{{ central_manager.address }}{{ item }}"
        method: GET
        return_content: yes
        headers:
          Authorization: "Bearer {{  access_token  }}"
          Content-Type: "application/json"
        validate_certs: false
      register: as3_app_preview_files
      with_items: "{{ preview_links }}"
      loop_control:
        label: "{{ item }}"

    - name: Save App AS3 preview files
      delegate_to: localhost
      copy:
        content: "{{ item | append_object_if_required(cm_apps, migrate_shared_object_prefix) | update_ip_if_required(ip_map) }}"
        dest: "/tmp/application_{{ item.item | regex_search('\\d+(?=/preview)') }}_migrate.json"
      with_items: "{{ as3_app_preview_files.results }}"

    - name: Create AS3 applications
      delegate_to: localhost
      uri:
        url: "https://{{  central_manager.address  }}/api/v1/spaces/default/appsvcs/documents"
        method: POST
        body: "{{ item | append_object_if_required(cm_apps, migrate_shared_object_prefix) | update_ip_if_required(ip_map) }}"
        body_format: json
        headers:
          Authorization: "Bearer {{  access_token  }}"
          Content-Type: "application/json"
        validate_certs: false
        status_code: 200
      with_items: "{{ as3_app_preview_files.results }}"
      register: documents

    - name: Map applications to document ids
      set_fact:
        apps_to_id_map: "{{ documents | get_document_ids_map(migrate_app_prefix) }}"

    - name: Create Deployment array by tree
      set_fact:
        deployment_array: "{{ apps_to_id_map | create_deployment_array(deploy_tree) }}"

    - name: Deploy applicatiuons to destination BigIP Next
      delegate_to: localhost
      uri:
        url: "https://{{ central_manager.address }}/mgmt/shared/appsvcs/declare/{{item.id}}/deployments?async=false"
        method: POST
        body:
          target: "{{item.target}}"
        body_format: json
        headers:
          Authorization: "Bearer {{  access_token  }}"
          Content-Type: "application/json"
        validate_certs: false
        status_code: 202
      loop: "{{ deployment_array }}"
      loop_control:
        pause: 30
      register: deployment_result

    - name: Deployment Results
      debug:
        msg: "{{deployment_result}}"
